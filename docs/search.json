[{"path":"/articles/Pseudotimecascade_tutorial.html","id":"example-pseudotimecascade-analysis-on-human-bone-marrow-samples","dir":"Articles","previous_headings":"","what":"Example: Pseudotimecascade Analysis on human bone marrow samples","title":"Get started with Pseudotimecascade","text":"tutorial introduces Pseudotimecascade R package, toolkit modeling gene expression dynamics along pseudotime trajectories single-cell RNA-seq data. method identifies genes switch-like temporal expression patterns supports downstream biological interpretation GO enrichment analysis. demonstrate complete workflow starting Seurat object clustering dimensionality reduction. key steps include: • Computing pseudotime using TSCAN tools • Fitting gene trajectories fitData() • Classifying gene patterns genePattern() • Visualizing dynamic genes heatmaps • Performing enrichment analysis (group-based bin-based) • Integrating multi-sample results assess reproducibility pipeline modular compatible pseudotime method, long cells assigned numeric pseudotime value. illustrate process using TSCAN specific marker genes hematopoietic lineages, framework can applied systems datasets. steps shown directly reproducible using Seurat object. Replace file names cluster IDs needed fit biological context. Let’s get started.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-1-load-data-and-subset-clusters","dir":"Articles","previous_headings":"","what":"Step 1: Load data and subset clusters","title":"Get started with Pseudotimecascade","text":"begin processed Seurat object containing UMAP embeddings clustering labels.","code":"library(Seurat) obj_all <- readRDS(\"obj.rds\")  # <- Replace with your own object"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"do-we-need-this-part","dir":"Articles","previous_headings":"Step 1: Load data and subset clusters","what":"=====Do we need this part?","title":"Get started with Pseudotimecascade","text":"subset clusters corresponding Common Myeloid Progenitors (e.g., cluster 15 19).","code":"clusters <- c(15, 19) obj <- subset(obj_all, seurat_clusters %in% clusters) obj@meta.data[obj@meta.data$seurat_clusters == 15, \"seurat_clusters\"] <- 1 obj@meta.data[obj@meta.data$seurat_clusters == 19, \"seurat_clusters\"] <- 2"},{"path":[]},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-2-compute-pseudotime-flexible-choice","dir":"Articles","previous_headings":"","what":"Step 2: Compute pseudotime (flexible choice)","title":"Get started with Pseudotimecascade","text":"Pseudotimecascade requires cells ordered along pseudotemporal axis, can computed using various trajectory inference tools Monocle, TSCAN, Slingshot, Diffusion Pseudotime. example, use TSCAN simplicity speed, users may replace pseudotime method choice. requirement numeric pseudotime value assigned cell, used order expression matrix model fitting. Visualize pseudotime UMAP:","code":"library(TSCAN) clu <- obj@meta.data$seurat_clusters names(clu) <- rownames(obj@meta.data)  # infer trajectory m <- exprmclust(t(obj@reductions$umap@cell.embeddings), cluster=clu, reduce=FALSE)  # pseudotime order order <- TSCANorder(m, orderonly = TRUE, startcluster = 1) order_vec <- seq_along(order) names(order_vec) <- order  # add pseudotime to meta obj$tscan_pseudotime <- order_vec[Cells(obj)] FeaturePlot(obj, \"tscan_pseudotime\", order = TRUE, pt.size = 0.1)"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-3-fit-pseudotime-expression-using-pseudotimecascade","dir":"Articles","previous_headings":"","what":"Step 3: Fit pseudotime expression using Pseudotimecascade","title":"Get started with Pseudotimecascade","text":"now extract expression matrix ordered pseudotime fit smoothed gene trajectories using fitData().","code":"# Ensure cells are ordered by pseudotime cells_order <- rownames(obj@meta.data[order(obj$tscan_pseudotime), ]) expr_df <- obj@assays$RNA@data[, cells_order]  # Fit gene curves fit_data_list <- fitData(   as.matrix(expr_df),   pt = obj$tscan_pseudotime[cells_order],   new_data = data.frame(pt = seq(1, nrow(obj@meta.data))),   mc.cores = 4 )"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-4-classify-gene-patterns","dir":"Articles","previous_headings":"","what":"Step 4: Classify gene patterns","title":"Get started with Pseudotimecascade","text":"fitting gene curve, gene assigned temporal expression pattern (e.g., increase, decrease, biphasic) using genePattern().","code":"gene_group <- genePattern(as.data.frame(fit_data_list[[\"data\"]]))  stip_list <- list(   expr_df = expr_df,   fit_data_list = fit_data_list,   gene_group = gene_group ) saveRDS(stip_list, \"stip_list.rds\")"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-5-select-genes-and-plot-pseudotimecascade-heatmap","dir":"Articles","previous_headings":"","what":"Step 5: Select genes and plot Pseudotimecascade heatmap","title":"Get started with Pseudotimecascade","text":"select significantly dynamic genes (based q-value threshold) visualize pseudotime expression trajectories using HeatmapSTIP(). Genes ordered assigned expression pattern switch point location.","code":"# Filter significant genes (q ≤ 0.05) qval <- stip_list$fit_data_list$qval fit_data <- stip_list$fit_data_list$data[qval <= 0.05, ]  # Optional: keep top 1000 most significant genes fit_data <- fit_data[order(qval)[1:1000], ]  # Match and sort gene pattern labels gene_group <- stip_list$gene_group[rownames(fit_data), ] gene_group <- gene_group[order(gene_group$pattern, gene_group$rank_point), ]  # Plot heatmap p <- HeatmapSTIP(   x = fit_data,   gl = rownames(fit_data),  # Can also provide a marker gene subset   annotation = gene_group[, \"pattern\"] ) ComplexHeatmap::draw(p)"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-6-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Step 6: Enrichment analysis","title":"Get started with Pseudotimecascade","text":"identify enriched biological processes pseudotime-dynamic genes using two complementary approaches: Group-based enrichment: temporal expression pattern (e.g., \"\", \"D\", \"ID\", etc.), use enrichGroup() perform GO enrichment based genes assigned pattern. Bin-based enrichment: Within pattern, use sliding window group genes switch point location apply compareEnrichBin() discover temporally transient functions. analyses applied set top-ranked genes (e.g., top 1000 q-value), ordered expression pattern switching point. , use \"\" pattern demonstration.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"group-based-enrichment","dir":"Articles","previous_headings":"Step 6: Enrichment analysis","what":"6.1: Group-Based Enrichment","title":"Get started with Pseudotimecascade","text":"Group-based enrichment examines biological functions overrepresented gene pattern. Tip: may later visualize results shown Step 7.1.","code":"library(dplyr)  # Load data obj_all <- readRDS(\"obj_tscan.rds\") stip_list <- readRDS(\"stip_list.rds\")  # Assume 'fit_data' and 'gene_group' already loaded and filtered from Step 5 universe <- rownames(obj_all@assays[[\"RNA\"]]@data)  # already loaded   # Retrieve and order gene pattern labels gene_group <- stip_list$gene_group[rownames(fit_data), ] gene_group <- gene_group[order(gene_group$pattern, gene_group$rank_point), ]  # Perform GO enrichment for each pattern enrich_group_list <- list() for (gp in unique(gene_group$pattern)) {   enrich_group <- enrichPattern(gene_group, gp, \"human\", universe = universe)      # Compute enrichment ratio   enrich_group@result$EnrichRatio <- with(enrich_group@result, {     (as.numeric(sub(\"/.*\", \"\", GeneRatio)) * as.numeric(sub(\".*/\", \"\", BgRatio))) /     (as.numeric(sub(\".*/\", \"\", GeneRatio)) * as.numeric(sub(\"/.*\", \"\", BgRatio)))   })      enrich_group_list[[gp]] <- enrich_group }  # Save results saveRDS(enrich_group_list, \"STIP_group_enrichment.rds\")"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"bin-based-enrichment","dir":"Articles","previous_headings":"Step 6: Enrichment analysis","what":"6.2: Bin-Based Enrichment","title":"Get started with Pseudotimecascade","text":"Bin-based enrichment captures temporal dynamics function sliding window across pseudotime trajectory within gene pattern. Note: demonstrate bin-based enrichment using \"\" pattern , full analysis can performed across expression patterns. Visualization bin-based enrichment shown Step 7.2.","code":"# Example: perform bin-based enrichment on \"I\" pattern genes library(Pseudotimecascade)  pattern <- \"I\" bin.width <- 0.2 stride <- 0.1  genes_bin_enrich <- compareEnrichBin(   gene_group,   pattern = pattern,   bin.width = bin.width,   stride = stride,   species = \"human\",   ont = \"BP\",   universe = universe )  # Compute enrichment ratio genes_bin_enrich@compareClusterResult$EnrichRatio <- with(genes_bin_enrich@compareClusterResult, {   (as.numeric(sub(\"/.*\", \"\", GeneRatio)) * as.numeric(sub(\".*/\", \"\", BgRatio))) /   (as.numeric(sub(\".*/\", \"\", GeneRatio)) * as.numeric(sub(\"/.*\", \"\", BgRatio))) })  # Save results saveRDS(genes_bin_enrich, paste0(\"STIP_bin_enrichment_\", pattern, \".rds\"))"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-7-visualization-of-go-enrichment-results","dir":"Articles","previous_headings":"","what":"Step 7: Visualization of GO Enrichment Results","title":"Get started with Pseudotimecascade","text":"identifying gene patterns using Pseudotimecascade, visualize enriched GO terms associated pattern. demonstrate group-based bin-based enrichment results.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"group-based-enrichment-visualization","dir":"Articles","previous_headings":"Step 7: Visualization of GO Enrichment Results","what":"7.1: Group-Based Enrichment Visualization","title":"Get started with Pseudotimecascade","text":"Group enrichment analyzes overrepresentation GO terms among genes specific pattern (e.g., \"\", \"D\", \"ID\", etc.). clusterProfiler::dotplot()(((need mentione ? since others’s package)))) function used visualize enriched GO terms. provide two common options: - Manual selection: Use predefined list biologically relevant GO terms. - Automatic ranking: Select top N enriched terms q-value. Tip: Manual selection preferred want highlight specific biological processes. general exploration, automatic ranking q-value useful alternative.","code":"library(Pseudotimecascade) library(clusterProfiler) library(ggplot2)  # Load enrichment result obj_enrich <- readRDS(\"STIP_group_enrichment.rds\")  # Output folder output <- \"figure/group_enrich/\" dir.create(output, recursive = TRUE, showWarnings = FALSE)  # Pattern of interest (e.g., \"I\" or \"D\") group <- \"I\" group_enrich <- obj_enrich[[group]]  # ----- Option 1: Manual selection of GO terms  terms <- c(\"GO:0015669\", \"GO:0015671\", \"GO:0048821\", \"GO:0030218\", \"GO:0006783\",             \"GO:0030099\", \"GO:0020027\", \"GO:0043249\", \"GO:0070482\", \"GO:0042168\") group_enrich_manual <- group_enrich group_enrich_manual@result <- group_enrich_manual@result[group_enrich_manual@result$ID %in% terms, ] group_enrich_manual@result <- group_enrich_manual@result[order(group_enrich_manual@result$qvalue), ]  p_manual <- dotplot(group_enrich_manual, showCategory = length(terms), color = \"qvalue\", orderBy = \"x\") +   ggtitle(paste(\"Selected GO terms - Pattern\", group)) ggsave(paste0(output, group, \"_manual_terms.pdf\"), p_manual, width = 5.5, height = 5)  # ----- Option 2: Automatically select top N GO terms by q-value top_n <- 20 group_enrich_auto <- group_enrich group_enrich_auto@result <- group_enrich_auto@result[order(group_enrich_auto@result$qvalue), ] group_enrich_auto@result <- group_enrich_auto@result[1:top_n, ]  p_auto <- dotplot(group_enrich_auto, showCategory = top_n, color = \"qvalue\", orderBy = \"x\") +   ggtitle(paste(\"Top\", top_n, \"GO terms - Pattern\", group)) ggsave(paste0(output, group, \"_top\", top_n, \"_auto.pdf\"), p_auto, width = 6, height = 5.5)"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-7-2-bin-based-enrichment-visualization","dir":"Articles","previous_headings":"Step 7: Visualization of GO Enrichment Results","what":"Step 7.2: Bin-Based Enrichment Visualization","title":"Get started with Pseudotimecascade","text":"Besides pattern-wise group enrichment, Pseudotimecascade supports bin-based enrichment, evaluates GO terms enriched along pseudotime bins within pattern. Tip: can adjust pattern, n, qval_cutoff explore different enrichment structures gene dynamics. Advanced Note: possible manually subset GO terms interest bin enrichment filtering bin_enrich@compareClusterResult using specific GO IDs (e.g., via ID %% c(…)). can useful track temporal dynamics predefined biological processes across pseudotime bins.","code":"# Load bin-based enrichment result genes_bin_enrich <- readRDS(\"STIP_bin_enrichment.rds\")  # Output folder output <- \"figure/bin_enrich/\" dir.create(output, recursive = TRUE, showWarnings = FALSE)  # Pattern of interest pattern <- \"I\"   n <- 8                 # Top GO terms per bin qval_cutoff <- 0.05    # Significance threshold  # Extract enrichment result bin_enrich <- genes_bin_enrich[[pattern]]  # Select top n terms per bin with q ≤ cutoff tmp_enrich <- bin_enrich@compareClusterResult %>%   group_by(Cluster) %>%   filter(qvalue <= qval_cutoff) %>%   arrange(qvalue) %>%   top_n(n = n, wt = -qvalue)  # Clean and reorder tmp_enrich <- tmp_enrich[order(tmp_enrich$Cluster, tmp_enrich$qvalue), ] bin_enrich@compareClusterResult <- bin_enrich@compareClusterResult[   bin_enrich@compareClusterResult$ID %in% unique(tmp_enrich$ID), ] bin_enrich@compareClusterResult$Description <- factor(   bin_enrich@compareClusterResult$Description,   levels = rev(unique(tmp_enrich$Description)) )  # Cap overly large q-values to avoid distortion in color scale bin_enrich@compareClusterResult[   bin_enrich@compareClusterResult$qvalue > 2 * qval_cutoff, \"qvalue\" ] <- 2 * qval_cutoff  # Bubble plot p <- ggplot(bin_enrich@compareClusterResult,             aes(x = Cluster, y = Description, size = Count)) +   geom_point(aes(color = qvalue)) +   scale_color_gradient2(low = \"red\", high = \"blue\", midpoint = 0.05, breaks = c(0.05)) +   DOSE::theme_dose(font.size = 12) +   labs(y = \"\", x = \"Gene Bins\") +   theme(axis.text.x = element_text(angle = 60, hjust = 1))  # Save plot ggsave(paste0(output, pattern, \"_bin_top\", n, \".pdf\"), p, width = 10, height = 13)"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-8-multi-sample-pseudotimecascade-analysis","dir":"Articles","previous_headings":"","what":"Step 8: Multi-sample Pseudotimecascade Analysis","title":"Get started with Pseudotimecascade","text":"section, demonstrate integrate Pseudotimecascade results across multiple samples identify reproducible gene patterns switch point trends. allows robust functional inference across donors replicates. first merge gene-level trends across samples, resulting list containing average pseudotime expression (mean_expr), consensus pattern labels (mean_pattern), sample-wise switching intervals (df_rank_point). outputs used enrichment analysis heatmap visualization. visualize selected lineage marker genes top 1000 significant genes, using MSHeatmapSTIP() function. Enrichment analysis can also applied multi-sample results way single sample (see Step 6). Specifically, group-based enrichment (using enrichPattern()) bin-based enrichment (using compareEnrichBin()) can applied mean_pattern matrix. visualization enriched GO terms, recommend reusing approaches Step 7: • Use dotplot() clusterProfiler display selected top-ranked GO terms enrichPattern() results. • Use ggplot2 generate bubble plots bin-based compareClusterResult output, gene bins x-axis GO terms y-axis. visualizations allow comparison dynamic biological functions across pseudotime, now made robust multi-sample integration.","code":"library(Pseudotimecascade) library(ComplexHeatmap)  # Load STIP results from multi-sample integration gene_mean_list <- readRDS(\"STIP_multi_exprmean_pattern.rds\")  # Define marker genes hsc_genes <- c('ERG', 'HOXA5', 'HOXA9', 'HOXA10', 'LCOR', 'RUNX1', 'SPI1', \"CD34\") cmp_genes <- c('GATA2', 'CEBPA', 'GATA1', 'SPI1', 'EKLF', 'FLI1','ZFPM1',                 'TAL1', 'GFI1', 'JUN', 'EGR1', 'EGR2', 'NAB2') ery_genes <- c('GATA1', 'TAL1', 'KLF1', 'LDB1', 'ZFPM1', 'ZBTB7A', 'MYB', \"HBB\", \"HBA1\", \"HBA2\") marked_genes <- unique(c(hsc_genes, cmp_genes, ery_genes))  # Draw heatmap pdf(\"STIP_Heatmap_top1k_with_interval.pdf\", width = 7, height = 10) p <- MSHeatmapSTIP(   x = gene_mean_list[[\"mean_expr\"]],   gl = marked_genes,   annotation = as.matrix(gene_mean_list[[\"mean_pattern\"]])[, \"pattern\"],   interval = gene_mean_list[[\"df_rank_point\"]] ) draw(p) dev.off()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Changxin Wan. Maintainer. Beijie Ji. .","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ji Z, Wan C, Ji B (2025). Pseudotimecascade: Pseudotimecascade visualizes gene expression cascade pseudotime analysis. R package version 0.1.0.","code":"@Manual{,   title = {Pseudotimecascade: Pseudotimecascade visualizes gene expression cascade in pseudotime analysis},   author = {Zhicheng Ji and Changxin Wan and Beijie Ji},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"depends","dir":"","previous_headings":"","what":"Depends","title":"Pseudotimecascade","text":"R (>= 3.5.0) ComplexHeatmap VGAM circlize dplyr ggplot2 clusterProfiler org.Hs.eg.db org.Mm.eg.db","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pseudotimecascade","text":"```{r } (!require(“BiocManager”, quietly = TRUE)) install.packages(“BiocManager”) BiocManager::install(c(“ComplexHeatmap”, “clusterProfiler”, “org.Hs.eg.db”, “org.Mm.eg.db”)) install.packages(c(“VGAM”, “circlize”, “dplyr”, “ggplot2”)) (!require(“devtools”)) install.packages(“devtools”) devtools::install_github(“changxinw/STIP”) ```","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Pseudotimecascade","text":"Please refer example folder Seurat example.","code":""},{"path":"/reference/HeatmapSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"HeatmapSTIP — HeatmapSTIP","title":"HeatmapSTIP — HeatmapSTIP","text":"Generate heatmap STIP result","code":""},{"path":"/reference/HeatmapSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HeatmapSTIP — HeatmapSTIP","text":"","code":"HeatmapSTIP(x, gl, annotation, ...)"},{"path":"/reference/HeatmapSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeatmapSTIP — HeatmapSTIP","text":"x gene expression matrix gl Marked gene list annotation Annotation matrix genes expression matrix ... parameters passed Heatmap","code":""},{"path":"/reference/HeatmapSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HeatmapSTIP — HeatmapSTIP","text":"ComplexHeatmap object","code":""},{"path":"/reference/HeatmapSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HeatmapSTIP — HeatmapSTIP","text":"Input gene expression matrix annotation matrixes, output heatmap","code":""},{"path":"/reference/HeatmapSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HeatmapSTIP — HeatmapSTIP","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"MSHeatmapSTIP — MSHeatmapSTIP","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Generate heatmap multi-sample STIP result","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"","code":"MSHeatmapSTIP(x, gl, annotation, interval, ...)"},{"path":"/reference/MSHeatmapSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"x gene expression matrix gl Marked gene list annotation Annotation matrix genes expression matrix interval list contains zero points gene sample ... parameters passed Heatmap","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"ComplexHeatmap object","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Input gene expression matrix annotation matrixes, output heatmap","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/PreprocessSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"PreprocessSTIP — PreprocessSTIP","title":"PreprocessSTIP — PreprocessSTIP","text":"State Transition Inference Prediction Preprocess","code":""},{"path":"/reference/PreprocessSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PreprocessSTIP — PreprocessSTIP","text":"","code":"PreprocessSTIP(data, gl)"},{"path":"/reference/PreprocessSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PreprocessSTIP — PreprocessSTIP","text":"data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time gl marked gene list","code":""},{"path":"/reference/PreprocessSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PreprocessSTIP — PreprocessSTIP","text":"Heatmap-class object","code":""},{"path":"/reference/PreprocessSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PreprocessSTIP — PreprocessSTIP","text":"function generates table performs (STIP) State Transition Inference Prediction","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"ScatterPlotSTIP — ScatterPlotSTIP","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Generate scatter plot gene fitted matrix","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"","code":"ScatterPlotSTIP(data, gene, count = FALSE)"},{"path":"/reference/ScatterPlotSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"data fitted gene expression matrix gene Plotted gene matrix count set true data count matrix","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"ggplot object","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Input fitted expression, output scatter plot","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Zhicheng Ji, Changxin Wan","code":""},{"path":"/reference/compareEnrichBin.html","id":null,"dir":"Reference","previous_headings":"","what":"compareEnrichBin — compareEnrichBin","title":"compareEnrichBin — compareEnrichBin","text":"Enrichment ordered genes specific pattern","code":""},{"path":"/reference/compareEnrichBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compareEnrichBin — compareEnrichBin","text":"","code":"compareEnrichBin(   gene.group,   pattern,   bin.width = 0.2,   stride = 0.1,   species = \"human\",   ont = \"BP\",   universe = FALSE,   ... )"},{"path":"/reference/compareEnrichBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compareEnrichBin — compareEnrichBin","text":"gene.group data frame indicate genes pattern pattern pattern enrichment analysis bin.width width bin stride stride step species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three universe pass universe paramenter enrichGO ... pass function enrichGO","code":""},{"path":"/reference/compareEnrichBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compareEnrichBin — compareEnrichBin","text":"compareClusterResult instance","code":""},{"path":"/reference/compareEnrichBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"compareEnrichBin — compareEnrichBin","text":"function generates list genes enrichResult instance","code":""},{"path":"/reference/compareEnrichBin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"compareEnrichBin — compareEnrichBin","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/enrichGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"enrichGroup — enrichGroup","title":"enrichGroup — enrichGroup","text":"Enrichment genes specific pattern","code":""},{"path":"/reference/enrichGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enrichGroup — enrichGroup","text":"","code":"enrichGroup(gene.group, species = \"mouse\", ont = \"BP\", ...)"},{"path":"/reference/enrichGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"enrichGroup — enrichGroup","text":"gene.group data frame indicate genes pattern species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three ... pass function enrichGO","code":""},{"path":"/reference/enrichGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enrichGroup — enrichGroup","text":"list enrichResult instance","code":""},{"path":"/reference/enrichGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"enrichGroup — enrichGroup","text":"function generates enrichResult instance","code":""},{"path":"/reference/enrichGroup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enrichGroup — enrichGroup","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/enrichPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"enrichPattern — enrichPattern","title":"enrichPattern — enrichPattern","text":"Enrichment genes specific pattern","code":""},{"path":"/reference/enrichPattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enrichPattern — enrichPattern","text":"","code":"enrichPattern(gene.group, pattern, species = \"mouse\", ont = \"BP\", ...)"},{"path":"/reference/enrichPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"enrichPattern — enrichPattern","text":"gene.group data frame indicate genes pattern pattern pattern enrichment analysis species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three ... pass function enrichGO","code":""},{"path":"/reference/enrichPattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enrichPattern — enrichPattern","text":"enrichResult instance","code":""},{"path":"/reference/enrichPattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"enrichPattern — enrichPattern","text":"function generates enrichResult instance","code":""},{"path":"/reference/enrichPattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enrichPattern — enrichPattern","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/fitData.html","id":null,"dir":"Reference","previous_headings":"","what":"fitData — fitData","title":"fitData — fitData","text":"Fit single cell gene expression data according cell pseudotime","code":""},{"path":"/reference/fitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitData — fitData","text":"","code":"fitData(   data,   pt = 1:ncol(data),   expr.cut = 0.1,   expr.cut.rate = 0.05,   pseudo.time = colnames(data),   p.adjust.method = \"BH\",   new_data = data.frame(pt = seq(1, ncol(data))),   verbose = TRUE,   mc.cores = 1 )"},{"path":"/reference/fitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitData — fitData","text":"data single cell expression matrix rows genes columns cells. expr.cut cutoff lowerest expression expr.cut.rate cutoff cells lower lowest expression pseudo.time cells ranked according pseudo time p.adjust.method method multiple hypothesis test new_data input matrix model prediction verbose show message running process mc.cores number cores parallel computing","code":""},{"path":"/reference/fitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fitData — fitData","text":"list contains scaled fitted gene expression matrix","code":""},{"path":"/reference/fitData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fitData — fitData","text":"function generates fitted expression matrix single cell RNA-seq","code":""},{"path":"/reference/fitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fitData — fitData","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/genePattern.html","id":null,"dir":"Reference","previous_headings":"","what":"genePattern — genePattern","title":"genePattern — genePattern","text":"State transition pattern gene","code":""},{"path":"/reference/genePattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genePattern — genePattern","text":"","code":"genePattern(data)"},{"path":"/reference/genePattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"genePattern — genePattern","text":"data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time","code":""},{"path":"/reference/genePattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"genePattern — genePattern","text":"dataframe state transtion pattern","code":""},{"path":"/reference/genePattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"genePattern — genePattern","text":"#' @title PreprocessSTIP #' @description State Transition Inference Prediction Preprocess #' @details function generates table performs (STIP) State Transition Inference Prediction #' @param data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time #' @param gl marked gene list #' @return Heatmap-class object #' @export PreprocessSTIP PreprocessSTIP <- function(data, gl)   gene_group <- genePattern(data)   plotdata <- data[rownames(gene_group), ]   p <- HeatmapSTIP(plotdata, gl, .matrix(gene_group)[, \"pattern\"])   return(p) function generates state transition pattern input gene","code":""},{"path":"/reference/genePattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"genePattern — genePattern","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/tcell.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of single cell T cell expression. — tcell","title":"Subset of single cell T cell expression. — tcell","text":"dataset containing expression profile T cells","code":""},{"path":"/reference/tcell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset of single cell T cell expression. — tcell","text":"","code":"tcell"},{"path":"/reference/tcell.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of single cell T cell expression. — tcell","text":"data frame 1000 rows 1001 columns:","code":""}]
