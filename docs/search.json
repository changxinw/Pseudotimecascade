[{"path":"/articles/Pseudotimecascade_tutorial.html","id":"example-pseudotimecascade-analysis-on-human-bone-marrow-samples","dir":"Articles","previous_headings":"","what":"Example: Pseudotimecascade Analysis on human bone marrow samples","title":"Get started with Pseudotimecascade","text":"tutorial introduces Pseudotimecascade R package, toolkit modeling gene expression dynamics along pseudotime trajectories single-cell RNA-seq data. method identifies genes switch-like temporal expression patterns supports downstream biological interpretation GO enrichment analysis. demonstrate complete workflow starting Seurat object clustering dimensionality reduction. key steps include: • Computing pseudotime using TSCAN tools • Fitting gene trajectories fitData() • Classifying gene patterns genePattern() • Visualizing dynamic genes heatmaps • Performing enrichment analysis (group-based bin-based) • Integrating multi-sample results assess reproducibility pipeline modular compatible pseudotime method, long cells assigned numeric pseudotime value. illustrate process using TSCAN specific marker genes hematopoietic lineages, framework can applied systems datasets. steps shown directly reproducible using Seurat object. Replace file names cluster IDs needed fit biological context. Let’s get started.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-1-load-data-and-generate-pseudotime-for-cells","dir":"Articles","previous_headings":"","what":"Step 1: Load data and generate pseudotime for cells","title":"Get started with Pseudotimecascade","text":"tutorial, start processed Seurat object contains gene expression, dimensionality reduction (e.g., PCA, UMAP). object, users can apply trajectory inference method TSCAN, Monocle3, Slingshot, RNA velocity obtain biologically meaningful ordering cells along pseudotime. requirement cell receives numeric pseudotime value, defines position along trajectory. Using ordering, expression matrix can arranged rows correspond genes columns correspond cells ordered pseudotime, expression values log-normalized scaled comparability across genes. , include pre-processed example object pseudotime values, practice users can start scRNA-seq data apply workflow pseudotime inference method.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-2-fit-pseudotime-expression-using-pseudotimecascade","dir":"Articles","previous_headings":"","what":"Step 2: Fit pseudotime expression using Pseudotimecascade","title":"Get started with Pseudotimecascade","text":"cells ordered pseudotime corresponding expression matrix prepared, next call core fitting function fitData(). expr_df obtained RNA@data slot Seurat object, columns restricted cells sorted pseudotime values. gives gene--cell expression matrix row gene column cell ordered along trajectory, effectively capturing pseudo-temporal dynamics gene expression. pseudotime vector pt provides numeric position cell along trajectory must aligned cell order used expr_df. argument new_data specifies pseudotime grid predictions made, mc.cores sets number parallel processes. output fit_data_list contains fitted expression trajectories, estimated switch points, statistical metrics form basis downstream pattern classification enrichment analysis. Tip: step involves fitting curves thousands genes, can computationally intensive; example, running mc.cores = 4 typically requires around three hours one thousand genes.","code":"# Ensure cells are ordered by pseudotime cells_order <- rownames(obj@meta.data[order(obj$tscan_pseudotime), ]) expr_df <- obj@assays$RNA@data[, cells_order]  # Fit gene curves fit_data_list <- fitData(   as.matrix(expr_df),   pt = obj$tscan_pseudotime[cells_order],   new_data = data.frame(pt = seq(1, nrow(obj@meta.data))),   mc.cores = 4 )"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-3-classify-gene-patterns","dir":"Articles","previous_headings":"","what":"Step 3: Classify gene patterns","title":"Get started with Pseudotimecascade","text":"smooth trajectories fitted, next step identify major temporal expression patterns across genes. function genePattern() takes fitted expression matrix fitData() classifies gene discrete category, increasing, decreasing, biphasic. categories provide intuitive summary genes behave along pseudotime, highlighting switch-like dynamics complex expression changes. output data frame row corresponds gene columns provide assigned pattern, estimated switch point (applicable), ranking statistic visualization. tutorial, store fitted expression matrix, list fit results, gene-level pattern assignments together single object (stip_list), serve input downstream heatmaps enrichment analyses.","code":"gene_group <- genePattern(as.data.frame(fit_data_list[[\"data\"]]))  stip_list <- list(   expr_df = expr_df,   fit_data = fit_data_list,   gene_group = gene_group )"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-4-select-genes-and-plot-pseudotimecascade-heatmap","dir":"Articles","previous_headings":"","what":"Step 4: Select genes and plot Pseudotimecascade heatmap","title":"Get started with Pseudotimecascade","text":"make visualization clearer computationally efficient, plot genes . Instead, select top 1,000 significant genes based q-values fitting step, subsample cells keeping every tenth cell along pseudotime. produces reduced expression matrix still preserves global dynamics avoids overplotting. addition filtered genes, also highlight set manually chosen marker genes relevant hematopoietic differentiation. marker genes annotated heatmap, making easier track known regulators interpret overall expression trends biological context. function HeatmapSTIP() automatically orders genes assigned expression pattern estimated switch point location, produces heatmap row gene column pseudotime-sampled cell. view provides compact summary dynamic gene expression programs along trajectory.","code":"library(Pseudotimecascade) stip_list <- readRDS(   system.file(\"extdata\", \"stip_list.rds\", package = \"Pseudotimecascade\") )  # Match and sort gene pattern labels hsc_genes <- c('ERG', 'HOXA5', 'HOXA9', 'HOXA10', 'LCOR', 'RUNX1', 'SPI1', \"CD34\") cmp_genes <- c('GATA2', 'CEBPA', 'GATA1', 'SPI1', 'EKLF', 'FLI1','ZFPM1',                'TAL1', 'GFI1', 'JUN', 'EGR1', 'EGR2', 'NAB2') ery_genes <- c('GATA1', 'TAL1', 'KLF1', 'LDB1', 'ZFPM1', 'ZBTB7A', 'MYB', \"HBB\", \"HBA1\", \"HBA2\") mon_genes <- c('SPI1', 'IRF8', 'KLF4', 'ERG1', 'JUN', 'JUNB', 'STAT1', 'STAT3', 'CEBPB') marked_genes <- unique(c(hsc_genes, cmp_genes, ery_genes))  # Plot heatmap p <- HeatmapSTIP(x = stip_list$fit_data,                   gl = marked_genes,                   annotation = as.matrix(stip_list$gene_group)[, \"pattern\"]) ComplexHeatmap::draw(p)"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-5-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Step 5: Enrichment analysis","title":"Get started with Pseudotimecascade","text":"identify enriched biological processes pseudotime-dynamic genes using two complementary approaches. Group-based enrichment applies GO analysis genes grouped temporal expression pattern (e.g., “”, “D”, “ID”), bin-based enrichment uses sliding window along switch points detect transient functional signals. approaches run set top-ranked genes (e.g., top 1000 q-value), ordered pattern switch point.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"group-based-enrichment","dir":"Articles","previous_headings":"Step 5: Enrichment analysis","what":"5.1: Group-Based Enrichment","title":"Get started with Pseudotimecascade","text":"Group-based enrichment Pseudotimecascade carried using enrichPattern() function, specifically designed temporal gene expression analysis. Given gene grouping table produced genePattern(), users can call enrichPattern() test functional overrepresentation within one specific pattern interest (e.g., “” “D”). function automatically extracts genes belonging chosen pattern performs GO enrichment user-defined background (universe). practice, universe set genes detected dataset preprocessing, ensuring enrichment interpreted relative expressed gene set. analysis links temporal gene expression patterns biological processes, highlighting functions enriched among dynamically regulated genes. Tip: may later visualize results shown Step 6.1.","code":"library(Pseudotimecascade) library(dplyr) library(clusterProfiler)  # Order gene pattern labels ggene_group <- stip_list[[\"gene_group\"]][rownames(stip_list[[\"fit_data\"]][[\"data\"]]), ] gene_group <- gene_group[order(gene_group$pattern, gene_group$rank_point), ]  # Perform GO enrichment for each pattern enrich_group_list <- list() for (gp in unique(gene_group$pattern)) {   enrich_group <- enrichPattern(gene_group, gp, \"human\", universe = universe)      # Compute enrichment ratio   enrich_group@result$EnrichRatio <- with(enrich_group@result, {     (as.numeric(sub(\"/.*\", \"\", GeneRatio)) * as.numeric(sub(\".*/\", \"\", BgRatio))) /     (as.numeric(sub(\".*/\", \"\", GeneRatio)) * as.numeric(sub(\"/.*\", \"\", BgRatio)))   })      enrich_group_list[[gp]] <- enrich_group }  # Save results saveRDS(enrich_group_list, \"STIP_group_enrichment.rds\")"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"bin-based-enrichment","dir":"Articles","previous_headings":"Step 5: Enrichment analysis","what":"5.2: Bin-Based Enrichment","title":"Get started with Pseudotimecascade","text":"Bin-based enrichment implemented Pseudotimecascade function compareEnrichBin(). Unlike group-based enrichment, aggregates genes pattern, method applies sliding window along pseudotime within pattern. window defined two parameters: bin.width (size window along pseudotime) stride (step size windows). allows us detect biological processes transiently enriched specific points trajectory. example demonstrate run compareEnrichBin() genes assigned \"\" pattern. background gene set (universe) group-based analysis. Tip: demonstrate bin-based enrichment using \"\" pattern , full analysis can performed across expression patterns. Visualization bin-based enrichment Patten \"\" shown Step 6.2.","code":"# Example: perform bin-based enrichment on \"I\" pattern genes pattern <- \"I\" bin.width <- 0.2 stride <- 0.1  genes_bin_enrich <- compareEnrichBin(   gene_group,   pattern = pattern,   bin.width = bin.width,   stride = stride,   species = \"human\",   ont = \"BP\",   universe = universe )  # Compute enrichment ratio genes_bin_enrich@compareClusterResult$EnrichRatio <- with(genes_bin_enrich@compareClusterResult, {   (as.numeric(sub(\"/.*\", \"\", GeneRatio)) * as.numeric(sub(\".*/\", \"\", BgRatio))) /   (as.numeric(sub(\".*/\", \"\", GeneRatio)) * as.numeric(sub(\"/.*\", \"\", BgRatio))) })  # Save results saveRDS(genes_bin_enrich, \"STIP_bin_enrichment.rds\")"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-6-visualization-of-go-enrichment-results","dir":"Articles","previous_headings":"","what":"Step 6: Visualization of GO Enrichment Results","title":"Get started with Pseudotimecascade","text":"identifying gene patterns using Pseudotimecascade, visualize enriched GO terms associated pattern. demonstrate group-based bin-based enrichment results.","code":""},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"group-based-enrichment-visualization","dir":"Articles","previous_headings":"Step 6: Visualization of GO Enrichment Results","what":"6.1: Group-Based Enrichment Visualization","title":"Get started with Pseudotimecascade","text":"Group enrichment analyzes overrepresentation GO terms among genes specific pattern (e.g., \"\", \"D\", \"ID\", etc.). Pseudotimecascade, implemented enrichment functions described Step 5, results can visualized highlight key GO terms. demonstrate visualize enrichment results \"\" pattern, using manual selection GO terms. plot shows GO enrichment genes increasing expression along pseudotime. Dot size indicates number genes (Count), x-axis shows fraction increasing genes annotated GO term (GeneRatio), color reflects enrichment significance (q-value). Tip: addition manual selection, users may also automatically display top N enriched GO terms ranked q-value unbiased exploration.","code":"library(Pseudotimecascade) library(clusterProfiler) library(ggplot2)  # Load enrichment result obj_enrich <- readRDS(system.file(\"extdata\", \"STIP_group_enrichment.rds\", package = \"Pseudotimecascade\"))  # Pattern of interest (e.g., \"I\" or \"D\") group <- \"I\" group_enrich <- obj_enrich[[group]]  # Select GO terms  terms <- c(\"GO:0048821\", \"GO:0030218\", \"GO:0030099\", \"GO:0020027\", \"GO:0043249\", \"GO:0070482\") group_enrich@result <- group_enrich@result[group_enrich@result$ID %in% terms, ] group_enrich@result <- group_enrich@result[order(group_enrich@result$qvalue), ]  plot_data <- subset(   group_enrich@result,   ID %in% terms )[order(group_enrich@result$qvalue), ]  plot_data$GeneRatio_num <- sapply(plot_data$GeneRatio, function(x) eval(parse(text = x)))  # plot p <- ggplot(plot_data, aes(GeneRatio_num, reorder(Description, GeneRatio_num))) +   geom_point(aes(size = Count, color = qvalue)) +   scale_color_gradient(low = \"red\", high = \"blue\", name = \"q-value\") +   scale_size(range = c(2, 8), name = \"Count\") +   labs(x = \"Gene Ratio\", y = NULL) +   theme_bw()  p"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"bin-based-enrichment-visualization","dir":"Articles","previous_headings":"Step 6: Visualization of GO Enrichment Results","what":"6.2: Bin-Based Enrichment Visualization","title":"Get started with Pseudotimecascade","text":"addition group-wise enrichment, Pseudotimecascade supports bin-based enrichment, evaluates functional categories appear different pseudotime windows within expression pattern. approach helps reveal transient biological processes may enriched specific points along trajectory.  x-axis shows pseudotime bins (clusters genes grouped switch point location), y-axis lists GO terms significantly enriched within bin. Dot size reflects number genes (Count) annotated GO term, dot color indicates enrichment significance (q-value). clarity, top 5 GO terms per bin q-value ≤ 0.05 shown. visualization highlights biological processes transiently enriched different stages along pseudotime. Tip: can adjust pattern, n, qval_cutoff explore different enrichment structures gene dynamics.","code":"library(dplyr) # Load bin-based enrichment result genes_bin_enrich <- readRDS(system.file(\"extdata\", \"STIP_bin_enrichment.rds\", package = \"Pseudotimecascade\"))  pattern <- \"I\" n <- 5 qval <- 0.05 bin_enrich <- genes_bin_enrich[[pattern]] tmp_enrich <- bin_enrich@compareClusterResult %>%   group_by(Cluster) %>%   filter(qvalue <= qval) %>%   slice_min(order_by = qvalue, n = n) %>%   ungroup() tmp_enrich <- tmp_enrich[order(tmp_enrich$Cluster, tmp_enrich$qvalue), ] bin_enrich@compareClusterResult <- bin_enrich@compareClusterResult[bin_enrich@compareClusterResult$ID %in% unique(tmp_enrich$ID), ] bin_enrich@compareClusterResult$Description <- factor(bin_enrich@compareClusterResult$Description, levels = rev(unique(tmp_enrich$Description))) bin_enrich@compareClusterResult[bin_enrich@compareClusterResult$qvalue>2*qval, \"qvalue\"] <- 2*qval  p <- ggplot(bin_enrich@compareClusterResult, aes_string(x = \"Cluster\", y = \"Description\", size=\"Count\")) +         geom_point(aes_string(color = \"qvalue\")) +         scale_color_gradient2(low=\"red\", high=\"blue\", midpoint=0.05, breaks=c(0.05)) +         DOSE::theme_dose(font.size = 12) +         labs(y=\"\", x=\"Gene ranking\") +         theme(axis.text.x = element_text(angle = 60, hjust=1)) p"},{"path":"/articles/Pseudotimecascade_tutorial.html","id":"step-7-multi-sample-pseudotimecascade-analysis","dir":"Articles","previous_headings":"","what":"Step 7: Multi-sample Pseudotimecascade Analysis","title":"Get started with Pseudotimecascade","text":"section, demonstrate integrate Pseudotimecascade results across multiple samples identify reproducible gene patterns switch point trends. allows robust functional inference across donors replicates. first merge gene-level trends across samples, resulting list containing average pseudotime expression (mean_expr), consensus pattern labels (mean_pattern), sample-wise switching intervals (df_switch_point). outputs used enrichment analysis heatmap visualization. visualize selected lineage marker genes top 1000 significant genes, using MSHeatmapSTIP() function.  Enrichment analysis can also applied multi-sample results way single sample (see Step 5). Specifically, group-based enrichment (using enrichPattern()) bin-based enrichment (using compareEnrichBin()) can applied mean_pattern matrix. visualization enriched GO terms, recommend reusing approaches Step 6. Together, visualizations reveal functional categories enriched specific patterns transiently emerge distinct pseudotime windows, providing dynamic view biological processes along trajectory.","code":"library(Pseudotimecascade) library(ComplexHeatmap)  # Load STIP results from multi-sample integration gene_mean_list <- readRDS(system.file(\"extdata\", \"stip_list_multi_sample.rds\", package = \"Pseudotimecascade\"))  # Define marker genes hsc_genes <- c('ERG', 'HOXA5', 'HOXA9', 'HOXA10', 'LCOR', 'RUNX1', 'SPI1', \"CD34\") cmp_genes <- c('GATA2', 'CEBPA', 'GATA1', 'SPI1', 'EKLF', 'FLI1','ZFPM1',                 'TAL1', 'GFI1', 'JUN', 'EGR1', 'EGR2', 'NAB2') ery_genes <- c('GATA1', 'TAL1', 'KLF1', 'LDB1', 'ZFPM1', 'ZBTB7A', 'MYB', \"HBB\", \"HBA1\", \"HBA2\") marked_genes <- unique(c(hsc_genes, cmp_genes, ery_genes))  # Draw heatmap p <- MSHeatmapSTIP(   x = gene_mean_list[[\"mean_expr\"]],   gl = marked_genes,   annotation = as.matrix(gene_mean_list[[\"mean_pattern\"]])[, \"pattern\"],   interval = gene_mean_list[[\"df_switch_point\"]],   use_raster = FALSE ) ComplexHeatmap::draw(p)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Changxin Wan. Maintainer. Beijie Ji. .","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ji Z, Wan C, Ji B (2025). Pseudotimecascade: Pseudotimecascade visualizes gene expression cascade pseudotime analysis. R package version 0.1.0.","code":"@Manual{,   title = {Pseudotimecascade: Pseudotimecascade visualizes gene expression cascade in pseudotime analysis},   author = {Zhicheng Ji and Changxin Wan and Beijie Ji},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"depends","dir":"","previous_headings":"","what":"Depends","title":"Pseudotimecascade","text":"R (>= 3.5.0) ComplexHeatmap VGAM circlize dplyr ggplot2 clusterProfiler org.Hs.eg.db org.Mm.eg.db","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pseudotimecascade","text":"```{r } (!require(“BiocManager”, quietly = TRUE)) install.packages(“BiocManager”) BiocManager::install(c(“ComplexHeatmap”, “clusterProfiler”, “org.Hs.eg.db”, “org.Mm.eg.db”)) install.packages(c(“VGAM”, “circlize”, “dplyr”, “ggplot2”)) (!require(“devtools”)) install.packages(“devtools”) devtools::install_github(“changxinw/STIP”) ```","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Pseudotimecascade","text":"Please refer example folder Seurat example.","code":""},{"path":"/reference/HeatmapSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"HeatmapSTIP — HeatmapSTIP","title":"HeatmapSTIP — HeatmapSTIP","text":"Generate heatmap STIP result","code":""},{"path":"/reference/HeatmapSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HeatmapSTIP — HeatmapSTIP","text":"","code":"HeatmapSTIP(x, gl, annotation, ...)"},{"path":"/reference/HeatmapSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeatmapSTIP — HeatmapSTIP","text":"x gene expression matrix gl Marked gene list annotation Annotation matrix genes expression matrix ... parameters passed Heatmap","code":""},{"path":"/reference/HeatmapSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HeatmapSTIP — HeatmapSTIP","text":"ComplexHeatmap object","code":""},{"path":"/reference/HeatmapSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HeatmapSTIP — HeatmapSTIP","text":"Input gene expression matrix annotation matrixes, output heatmap","code":""},{"path":"/reference/HeatmapSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HeatmapSTIP — HeatmapSTIP","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"MSHeatmapSTIP — MSHeatmapSTIP","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Generate heatmap multi-sample STIP result","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"","code":"MSHeatmapSTIP(x, gl, annotation, interval, ...)"},{"path":"/reference/MSHeatmapSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"x gene expression matrix gl Marked gene list annotation Annotation matrix genes expression matrix interval list contains zero points gene sample ... parameters passed Heatmap","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"ComplexHeatmap object","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Input gene expression matrix annotation matrixes, output heatmap","code":""},{"path":"/reference/MSHeatmapSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MSHeatmapSTIP — MSHeatmapSTIP","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/PreprocessSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"PreprocessSTIP — PreprocessSTIP","title":"PreprocessSTIP — PreprocessSTIP","text":"State Transition Inference Prediction Preprocess","code":""},{"path":"/reference/PreprocessSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PreprocessSTIP — PreprocessSTIP","text":"","code":"PreprocessSTIP(data, gl)"},{"path":"/reference/PreprocessSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PreprocessSTIP — PreprocessSTIP","text":"data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time gl marked gene list","code":""},{"path":"/reference/PreprocessSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PreprocessSTIP — PreprocessSTIP","text":"Heatmap-class object","code":""},{"path":"/reference/PreprocessSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PreprocessSTIP — PreprocessSTIP","text":"function generates table performs (STIP) State Transition Inference Prediction","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":null,"dir":"Reference","previous_headings":"","what":"ScatterPlotSTIP — ScatterPlotSTIP","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Generate scatter plot gene fitted matrix","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"","code":"ScatterPlotSTIP(data, gene, count = FALSE)"},{"path":"/reference/ScatterPlotSTIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"data fitted gene expression matrix gene Plotted gene matrix count set true data count matrix","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"ggplot object","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Input fitted expression, output scatter plot","code":""},{"path":"/reference/ScatterPlotSTIP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ScatterPlotSTIP — ScatterPlotSTIP","text":"Zhicheng Ji, Changxin Wan","code":""},{"path":"/reference/compareEnrichBin.html","id":null,"dir":"Reference","previous_headings":"","what":"compareEnrichBin — compareEnrichBin","title":"compareEnrichBin — compareEnrichBin","text":"Enrichment ordered genes specific pattern","code":""},{"path":"/reference/compareEnrichBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compareEnrichBin — compareEnrichBin","text":"","code":"compareEnrichBin(   gene.group,   pattern,   bin.width = 0.2,   stride = 0.1,   species = \"human\",   ont = \"BP\",   universe = FALSE,   ... )"},{"path":"/reference/compareEnrichBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compareEnrichBin — compareEnrichBin","text":"gene.group data frame indicate genes pattern pattern pattern enrichment analysis bin.width width bin stride stride step species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three universe pass universe paramenter enrichGO ... pass function enrichGO","code":""},{"path":"/reference/compareEnrichBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compareEnrichBin — compareEnrichBin","text":"compareClusterResult instance","code":""},{"path":"/reference/compareEnrichBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"compareEnrichBin — compareEnrichBin","text":"function generates list genes enrichResult instance","code":""},{"path":"/reference/compareEnrichBin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"compareEnrichBin — compareEnrichBin","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/enrichGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"enrichGroup — enrichGroup","title":"enrichGroup — enrichGroup","text":"Enrichment genes specific pattern","code":""},{"path":"/reference/enrichGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enrichGroup — enrichGroup","text":"","code":"enrichGroup(gene.group, species = \"mouse\", ont = \"BP\", ...)"},{"path":"/reference/enrichGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"enrichGroup — enrichGroup","text":"gene.group data frame indicate genes pattern species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three ... pass function enrichGO","code":""},{"path":"/reference/enrichGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enrichGroup — enrichGroup","text":"list enrichResult instance","code":""},{"path":"/reference/enrichGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"enrichGroup — enrichGroup","text":"function generates enrichResult instance","code":""},{"path":"/reference/enrichGroup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enrichGroup — enrichGroup","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/enrichPattern.html","id":null,"dir":"Reference","previous_headings":"","what":"enrichPattern — enrichPattern","title":"enrichPattern — enrichPattern","text":"Enrichment genes specific pattern","code":""},{"path":"/reference/enrichPattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enrichPattern — enrichPattern","text":"","code":"enrichPattern(gene.group, pattern, species = \"mouse\", ont = \"BP\", ...)"},{"path":"/reference/enrichPattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"enrichPattern — enrichPattern","text":"gene.group data frame indicate genes pattern pattern pattern enrichment analysis species select human mouse ont One \"BP\", \"MF\", \"CC\" subontologies, \"\" three ... pass function enrichGO","code":""},{"path":"/reference/enrichPattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enrichPattern — enrichPattern","text":"enrichResult instance","code":""},{"path":"/reference/enrichPattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"enrichPattern — enrichPattern","text":"function generates enrichResult instance","code":""},{"path":"/reference/enrichPattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enrichPattern — enrichPattern","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/fitData.html","id":null,"dir":"Reference","previous_headings":"","what":"fitData — fitData","title":"fitData — fitData","text":"Fit single cell gene expression data according cell pseudotime","code":""},{"path":"/reference/fitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitData — fitData","text":"","code":"fitData(   data,   pt = 1:ncol(data),   expr.cut = 0.1,   expr.cut.rate = 0.05,   pseudo.time = colnames(data),   p.adjust.method = \"BH\",   new_data = data.frame(pt = seq(1, ncol(data))),   verbose = TRUE,   mc.cores = 1 )"},{"path":"/reference/fitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitData — fitData","text":"data single cell expression matrix rows genes columns cells. expr.cut cutoff lowerest expression expr.cut.rate cutoff cells lower lowest expression pseudo.time cells ranked according pseudo time p.adjust.method method multiple hypothesis test new_data input matrix model prediction verbose show message running process mc.cores number cores parallel computing","code":""},{"path":"/reference/fitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fitData — fitData","text":"list contains scaled fitted gene expression matrix","code":""},{"path":"/reference/fitData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fitData — fitData","text":"function generates fitted expression matrix single cell RNA-seq","code":""},{"path":"/reference/fitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fitData — fitData","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/genePattern.html","id":null,"dir":"Reference","previous_headings":"","what":"genePattern — genePattern","title":"genePattern — genePattern","text":"State transition pattern gene","code":""},{"path":"/reference/genePattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genePattern — genePattern","text":"","code":"genePattern(data)"},{"path":"/reference/genePattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"genePattern — genePattern","text":"data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time","code":""},{"path":"/reference/genePattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"genePattern — genePattern","text":"dataframe state transtion pattern","code":""},{"path":"/reference/genePattern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"genePattern — genePattern","text":"#' @title PreprocessSTIP #' @description State Transition Inference Prediction Preprocess #' @details function generates table performs (STIP) State Transition Inference Prediction #' @param data single cell expression matrix data.frame rows genes columns cells. Cells follow order pseudo time #' @param gl marked gene list #' @return Heatmap-class object #' @export PreprocessSTIP PreprocessSTIP <- function(data, gl)   gene_group <- genePattern(data)   plotdata <- data[rownames(gene_group), ]   p <- HeatmapSTIP(plotdata, gl, .matrix(gene_group)[, \"pattern\"])   return(p) function generates state transition pattern input gene","code":""},{"path":"/reference/genePattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"genePattern — genePattern","text":"Zhicheng Ji, Changxin Wan, Beijie Ji","code":""},{"path":"/reference/tcell.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset of single cell T cell expression. — tcell","title":"Subset of single cell T cell expression. — tcell","text":"dataset containing expression profile T cells","code":""},{"path":"/reference/tcell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset of single cell T cell expression. — tcell","text":"","code":"tcell"},{"path":"/reference/tcell.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subset of single cell T cell expression. — tcell","text":"data frame 1000 rows 1001 columns:","code":""}]
